{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Container management microservice This project is part of the container shipment implementation solution you can read detail here. . The goal of this Container management service is to support the reefer containers inventory management and to process all the events related to the container entity. We want to support the following events: ContainerAddedToInventory, ContainerRemovedFromInventory ContainerAtLocation ContainerOnMaintenance, ContainerOffMaintenance, ContainerAssignedToOrder, ContainerReleasedFromOrder ContainerGoodLoaded, ContainerGoodUnLoaded ContainerOnShip, ContainerOffShip ContainerOnTruck, ContainerOffTruck This repository illustrates how to implement this service in different ways: kStreams and Python. The features are: As a REST API end point calleable from other services. As a kafka streams consumer of orderCreated event published in the Kafka orders topic: the code will look at the pickup location and searchdx in the container inventory the containers close to this location. As a kafka streams agent consuming container events from the containers topic and managing a stateful table to keep container inventory in memory. Finally an important element of this project is the integration of Kafka topic as datasource to develop a machine learning model for the container predictive maintenance scoring. See details in this note . Component view As the service needs to offer some basic APIs and be able to consumer and produce events the code will have at least two main components: a kafka consumer and a HTTP server exposing REST APIs. The following diagram illustrates a python flask implementation packaged in docker container: and the implementation considerations and best practices are described here. The second diagram shows the same service implemented with Apache Kafka KStreams API in Java, deployed in Liberty server with JAXRS API: The implementation description is here. Container inventory We are providing a tool to publish container created events to the Kafka container topic. The python code is under the tools folder. It can be executed using our Python docker image with the command: docker run -e KAFKA_BROKERS=$KAFKA_BROKERS -v $(pwd):/home --network=docker_default -ti ibmcase/python bash root@2f049cb7b4f2:/ cd home root@2f049cb7b4f2:/ python ProduceContainerCreatedEvent.py Assign container to order The implementation will search the list of containers closed to the source location. We simplify the implementation by assuming mapping container (longitude, latitude) position to be in an area closed to the harbor close to the pickup location. We do not manage the time when the container will be there. We assume containers is at location at the time of the order is processed, is the same as the time of the pickup. We may fine tune that if we can make it simple. The output of this assignment processing is an event to the orders topic.","title":"Home"},{"location":"#container-management-microservice","text":"This project is part of the container shipment implementation solution you can read detail here. . The goal of this Container management service is to support the reefer containers inventory management and to process all the events related to the container entity. We want to support the following events: ContainerAddedToInventory, ContainerRemovedFromInventory ContainerAtLocation ContainerOnMaintenance, ContainerOffMaintenance, ContainerAssignedToOrder, ContainerReleasedFromOrder ContainerGoodLoaded, ContainerGoodUnLoaded ContainerOnShip, ContainerOffShip ContainerOnTruck, ContainerOffTruck This repository illustrates how to implement this service in different ways: kStreams and Python. The features are: As a REST API end point calleable from other services. As a kafka streams consumer of orderCreated event published in the Kafka orders topic: the code will look at the pickup location and searchdx in the container inventory the containers close to this location. As a kafka streams agent consuming container events from the containers topic and managing a stateful table to keep container inventory in memory. Finally an important element of this project is the integration of Kafka topic as datasource to develop a machine learning model for the container predictive maintenance scoring. See details in this note .","title":"Container management microservice"},{"location":"#component-view","text":"As the service needs to offer some basic APIs and be able to consumer and produce events the code will have at least two main components: a kafka consumer and a HTTP server exposing REST APIs. The following diagram illustrates a python flask implementation packaged in docker container: and the implementation considerations and best practices are described here. The second diagram shows the same service implemented with Apache Kafka KStreams API in Java, deployed in Liberty server with JAXRS API: The implementation description is here.","title":"Component view"},{"location":"#container-inventory","text":"We are providing a tool to publish container created events to the Kafka container topic. The python code is under the tools folder. It can be executed using our Python docker image with the command: docker run -e KAFKA_BROKERS=$KAFKA_BROKERS -v $(pwd):/home --network=docker_default -ti ibmcase/python bash root@2f049cb7b4f2:/ cd home root@2f049cb7b4f2:/ python ProduceContainerCreatedEvent.py","title":"Container inventory"},{"location":"#assign-container-to-order","text":"The implementation will search the list of containers closed to the source location. We simplify the implementation by assuming mapping container (longitude, latitude) position to be in an area closed to the harbor close to the pickup location. We do not manage the time when the container will be there. We assume containers is at location at the time of the order is processed, is the same as the time of the pickup. We may fine tune that if we can make it simple. The output of this assignment processing is an event to the orders topic.","title":"Assign container to order"},{"location":"metrics/","text":"Reefer Container Metric as IoT The reefer container is a Internet of Thing device that run motor, compressor to maintain cold inside the container. The fleetms microservice is generating simulated container metrics events to emulate the container on ship. But this project will add capabilities to generate a lot of data to create training and test set for machine learning exercises for predictive maintentane and cold chain scoring. Data set creation for container metrics As we are not in the business of reefer container shipment we do not have data set. Predictive maintenance The success of predictive maintenance models depend on three main components: having the right data framing the problem appropriately evaluating the predictions properly From a methodology point of view the Data Scientist needs to address the following questions: What type of failure to consider and which one to predict? What kind of failure is happening? slow degradation or instantaneous failure? What could be the relation between a product characteristics and the failure? What kind of measure exist to assess the given characteristic? Which measurements correspond to good functioning and which ones correspond to failure? How often metrics are reported? What question the model should answer? What kind of output should the model give? How long in advance should the model be able to indicate that a failure will occur? What are the business impact to do not predict the failure? and predicting false negative failure? What is the expected accuracy? There are different meodeling approach to tackle predictive maintenance: regression model classification to predict failure for a given time period classify anomalous behavior: classes are not known in advance. Normal operation is known. compute probability of failure over time Reefer problem types: There are multiple different potential issues that could happen to a refrigerator container. We are choosing to model the \"Sensor Malfunctions\" issue: Sensors in the refrigeration unit need to be calibrated and be continuously operational. An example of failure may come from the air sensor making inaccurate readings of temperatures, which lead to sploiled content. A potential reason may come from a faulty calibration, which can go unnoticed for a good time period. It may be diffiult to know if there is an issue. The other common potential issues are: Fluid leaks, like engine oil, coolant liquid. The preassure sensors added to the circuit may help identify preassure lost over time. Faulty belts and hoses. Faulty calibration: A non-calibrated reefer can cool at a slower or faster rate than desired. Damaged Air Chute. Condenser Issues like broken or damaged coils, clamps or bolts missing, and leaks. Door Seals damaged. Blocked air passage: to keep the temperature homogenous inside the reefer. So the question we want to answer is: does the Reefer keep accurate temperature overtime between what is set verus what is measured? Data set Well we do not have data. But we may be able to simulate them. As this is not production work, we should be able to get the end to end story still working from a solution point of view. The historical data need to represent failure, and represent the characteristics of a Reefer container. We can imagine it includes a lot of sensors to get interesting correlated or independant features. Model Simple environment We propose to code a simulator to create the training and test sets so we can build the model inside Jupiter notebook and with sklearn library. The simulator will be also use as an injector to real time event on loaded containers, used to travel goods, so we can trigger a maintenance order process. Here is a diagram for the data scientist environment: For the runtime execution we will plug the model as a consumer of containerMetrics topic which keeps container metrics in the form of event like below, keyed by containerID. { \"timestamp\": 1234567, \"containerID\": \"C10\", } References For modeling predictive maintenance we found this article from BigData Republique, on Medium, very interesting.","title":"Container Predictive Maintenance"},{"location":"metrics/#reefer-container-metric-as-iot","text":"The reefer container is a Internet of Thing device that run motor, compressor to maintain cold inside the container. The fleetms microservice is generating simulated container metrics events to emulate the container on ship. But this project will add capabilities to generate a lot of data to create training and test set for machine learning exercises for predictive maintentane and cold chain scoring.","title":"Reefer Container Metric as IoT"},{"location":"metrics/#data-set-creation-for-container-metrics","text":"As we are not in the business of reefer container shipment we do not have data set.","title":"Data set creation for container metrics"},{"location":"metrics/#predictive-maintenance","text":"The success of predictive maintenance models depend on three main components: having the right data framing the problem appropriately evaluating the predictions properly From a methodology point of view the Data Scientist needs to address the following questions: What type of failure to consider and which one to predict? What kind of failure is happening? slow degradation or instantaneous failure? What could be the relation between a product characteristics and the failure? What kind of measure exist to assess the given characteristic? Which measurements correspond to good functioning and which ones correspond to failure? How often metrics are reported? What question the model should answer? What kind of output should the model give? How long in advance should the model be able to indicate that a failure will occur? What are the business impact to do not predict the failure? and predicting false negative failure? What is the expected accuracy? There are different meodeling approach to tackle predictive maintenance: regression model classification to predict failure for a given time period classify anomalous behavior: classes are not known in advance. Normal operation is known. compute probability of failure over time","title":"Predictive maintenance"},{"location":"metrics/#reefer-problem-types","text":"There are multiple different potential issues that could happen to a refrigerator container. We are choosing to model the \"Sensor Malfunctions\" issue: Sensors in the refrigeration unit need to be calibrated and be continuously operational. An example of failure may come from the air sensor making inaccurate readings of temperatures, which lead to sploiled content. A potential reason may come from a faulty calibration, which can go unnoticed for a good time period. It may be diffiult to know if there is an issue. The other common potential issues are: Fluid leaks, like engine oil, coolant liquid. The preassure sensors added to the circuit may help identify preassure lost over time. Faulty belts and hoses. Faulty calibration: A non-calibrated reefer can cool at a slower or faster rate than desired. Damaged Air Chute. Condenser Issues like broken or damaged coils, clamps or bolts missing, and leaks. Door Seals damaged. Blocked air passage: to keep the temperature homogenous inside the reefer. So the question we want to answer is: does the Reefer keep accurate temperature overtime between what is set verus what is measured?","title":"Reefer problem types:"},{"location":"metrics/#data-set","text":"Well we do not have data. But we may be able to simulate them. As this is not production work, we should be able to get the end to end story still working from a solution point of view. The historical data need to represent failure, and represent the characteristics of a Reefer container. We can imagine it includes a lot of sensors to get interesting correlated or independant features.","title":"Data set"},{"location":"metrics/#model","text":"","title":"Model"},{"location":"metrics/#simple-environment","text":"We propose to code a simulator to create the training and test sets so we can build the model inside Jupiter notebook and with sklearn library. The simulator will be also use as an injector to real time event on loaded containers, used to travel goods, so we can trigger a maintenance order process. Here is a diagram for the data scientist environment: For the runtime execution we will plug the model as a consumer of containerMetrics topic which keeps container metrics in the form of event like below, keyed by containerID. { \"timestamp\": 1234567, \"containerID\": \"C10\", }","title":"Simple environment"},{"location":"metrics/#references","text":"For modeling predictive maintenance we found this article from BigData Republique, on Medium, very interesting.","title":"References"},{"location":"flask/","text":"Python Flask implementation of the container inventory management","title":"Python FLask and Kafka Implementation"},{"location":"flask/#python-flask-implementation-of-the-container-inventory-management","text":"","title":"Python Flask implementation of the container inventory management"},{"location":"kstreams/","text":"Kafka Streams implementation of the container inventory management In this chapter we are presenting how to sue the Kafka Streams API combined with Kafkat event sourcing to implement the container inventory management. The component can be represented in the figure below: The container topics includes all the event about container life cycle. The application is java based and deployed in Liberty packaged into a docker image deployable on kubernetes. The service exposes some RESTful APIs to get a container by ID. No CUD operations as all is done via events. The Streams implementation keeps data in table. The Apache Kafka Streams API is a client library for building applications and microservices, where the input and output data are stored in Kafka clusters. It simplifies the implementation of the stateless or stateful event processing to transform and enrich data. It supports time windowing processing. We encourage to do this KStream tutorial . The features we want to illustrate in this implementation, using KStreams are: Listen to ContainerAddedToInventory event from the containers topic and maintains a stateful table of containers. Listen to OrderCreated event from orders and assign a container from the inventory based on the pickup location and the container location and its characteristics. Implemented as JAXRS application deployed on Liberty and packaged with dockerfile. Deploy to kubernetes or run with docker-compose Start with maven Kafka stream delivers a Maven archetype to create a squeleton project. The following command can be used to create the base code. mvn archetype:generate -DarchetypeGroupId=org.apache.kafka -DarchetypeArtifactId=streams-quickstart-java -DarchetypeVersion=2.1.0 -DgroupId=kc-container -DartifactId=kc-container-streams -Dversion=0.1 -Dpackage=containerManager We added a .project file to develop the code in Eclipse, imported the code into Eclipse and modify the .classpath with the following lines: <classpathentry kind=\"con\" path=\"org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER\"> <attributes> <attribute name=\"maven.pomderived\" value=\"true\"/> </attributes> </classpathentry> To access to serializer and testing framework we added the following dependencies in the pom.xml: <dependency> <groupId>org.apache.kafka</groupId> <artifactId>kafka-clients</artifactId> <version>${kafka.version}</version> </dependency> <dependency> <groupId>org.apache.kafka</groupId> <artifactId>kafka-streams-test-utils</artifactId> <version>${kafka.version}</version> <scope>test</scope> </dependency> In fact at the end of our development the pom was enhanced to support, liberty, integration tests and javametrics. Some useful Kafka streams APIs The stream configuration looks similar to the Kafka consumer and producer configuration. props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"container-streams\"); props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\"); props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass()); props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass()); The StreamsConfig is a specific configuration for Streams app. One of the interesting class is the KStream to manage a stream of structured events. Kstreams represents unbounded collection of immutable events. Two classes are supporting the order and container processing: ContainerInventoryView ContainerOrderAssignment We are using the Streams DSL APIs to do the processing. Here is an example of terminal stream to print what is coming to the orders topic: final StreamsBuilder builder = new StreamsBuilder(); builder.stream(\"orders\") .foreach((key,value) -> { Order order = parser.fromJson((String)value, OrderEvent.class).getPayload(); // TODO do something to the order System.out.println(\"received order \" + key + \" \" + value); }); final Topology topology = builder.build(); final KafkaStreams streams = new KafkaStreams(topology, props); streams.start(); We want now to implement the container inventory. We want to support the following events: ContainerAddedToInventory, ContainerRemovedFromInventory ContainerAtLocation ContainerOnMaintenance, ContainerOffMaintenance, ContainerAssignedToOrder, ContainerReleasedFromOrder ContainerGoodLoaded, ContainerGoodUnLoaded ContainerOnShip, ContainerOffShip ContainerOnTruck, ContainerOffTruck We want the container event to keep a timestamp, a version, a type, and a payload representing the data describing a Reefer container. The Key is the containerID. The java class for the container event is here . Using a TDD approach we will start by the tests to implement the solution. For more information on the Streams DSL API keeep this page slose to you . Test Driven Development We want to document two major test suites. One for building the internal view of the container inventory, the other to support the container to order assignment. Container inventory When the service receives a ContainerAdded event it needs to add it to the table and be able to retreive it by ID To support the Get By ID we are adding a Service class with the operation exposed as RESTful resource using JAXRS annotations. We already described this approach in the fleetms project . To test a stream application without Kafka backbone there is a test utility available here . The settings are simple: get the properties, define the serialisation of the key and value of the event to get from kafka, define the stream process flow, named topology, send the input and get the output. The test TestContainerInventory is illustrating how to use the TopologyTestDriver . Properties props = ApplicationConfig.getStreamsProperties(\"test\"); props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"dummy:1234\"); TopologyTestDriver testDriver = new TopologyTestDriver( buildProcessFlow(), props); ConsumerRecordFactory<String, String> factory = new ConsumerRecordFactory<String, String>(\"containers\", new StringSerializer(), new StringSerializer()); ConsumerRecord<byte[],byte[]> record = factory.create(\"containers\",ce.getContainerID(), parser.toJson(ce)); testDriver.pipeInput(record); We are using the String default serialization for the key and the ContainerEvent, and use Gson to serialize and deserialize the json. So the test is to prepare a ContainerEvent with type = \"ContainerAdded\" and then get the payload, persist it in the table and access to the table via the concept of store and validate the data. Below is the access to the store and compare the expected results KeyValueStore<String, String> store = testDriver.getKeyValueStore(\"queryable-container-store\"); String containerStrg = store.get(ce.getContainerID()); Assert.assertNotNull(containerStrg); Assert.assertTrue(containerStrg.contains(ce.getContainerID())); Assert.assertTrue(containerStrg.contains(\"atDock\")); Now the tricky part is in the Stream process flow. The idea is to process the ContainerEvent as streams (of String) and extract the payload (a Container), then generate the Container in a new stream, group by the key and then save to a table. We separate the code in a function so e can move it into the real application after. public Topology buildProcessFlow() { final StreamsBuilder builder = new StreamsBuilder(); // containerEvent is a string, map values help to change the type and data of the inpit values builder.stream(CONTAINERS_TOPIC).mapValues((containerEvent) -> { // the container payload is of interest to keep in table Container c = jsonParser.fromJson((String)containerEvent, ContainerEvent.class).getPayload(); return jsonParser.toJson(c); }).groupByKey() // the keys are kept so we can group by key to prepare for the tabl .reduce((container,container1) -> { System.out.println(\"received container \" + container1 ); return container1; }, Materialized.as(\"queryable-container-store\")); return builder.build(); } The trick is to use the reduce() function that get the container and save it to the store that we can specify. The unit test runs successfully with the command: mvn -Dtest=TestContainerInventory test . This logic can be integrated in a View class. So we can refactor the test and add new class (see ContainerInventoryView class) to move the logic into the applciation. From a design point of view this class is a DAO. Now that we are not using the Testing tool, we need the real streams. In class ContainerInventoryView: private KafkaStreams streams; // .. Properties props = ApplicationConfig.getStreamsProperties(\"container-streams\"); props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\"); streams = new KafkaStreams(buildProcessFlow(), props); try { streams.cleanUp(); streams.start(); } catch (Throwable e) { System.exit(1); } As illustrated above, the streams API is a continuous running Thread, so it needs to be started only one time. We will address scaling separatly. So we isolate the DAO as a Singleton, and start it when the deployed application starts, via a ServletContextListener. public class EventLoop implements ServletContextListener{ @Override public void contextInitialized(ServletContextEvent sce) { // Initialize the Container consumer ContainerInventoryView cView = (ContainerInventoryView)ContainerInventoryView.instance(); cView.start(); } Now we can add the getById operation, package as a war, deploy it to Liberty. Container to Order Assignment The business logic we want to implement is to get an order with the source pickup city, the type of product, the quantity and the expected pickup date, manage the internal list of containers and search for a container located close to the pickup city from the order. The test to validate this logic is under kstreams/src/test/java/ut/TestContainerAssignment . The story will not be completed if we do not talk about how th application get the order. As presented in the design and order command microservice implementation, when an order is created an event is generated to the orders topic. So we need to add another Streams processing and start the process flow in the context listener. Run tests Recall with maven we can run all the unit tests, one test and skip integration tests. # Test a unique test $ mvn -Dtest=TestContainerInventory test # Skip all tests mvn install -DskipTests # Skip integration test mvn install -DskipITs # Run everything mvn install To start the liberty server use the script: ./script/startLocalLiberty or mvn liberty:run-server How streams flow are resilient? How to scale?","title":"Kafka Streams Implementation"},{"location":"kstreams/#kafka-streams-implementation-of-the-container-inventory-management","text":"In this chapter we are presenting how to sue the Kafka Streams API combined with Kafkat event sourcing to implement the container inventory management. The component can be represented in the figure below: The container topics includes all the event about container life cycle. The application is java based and deployed in Liberty packaged into a docker image deployable on kubernetes. The service exposes some RESTful APIs to get a container by ID. No CUD operations as all is done via events. The Streams implementation keeps data in table. The Apache Kafka Streams API is a client library for building applications and microservices, where the input and output data are stored in Kafka clusters. It simplifies the implementation of the stateless or stateful event processing to transform and enrich data. It supports time windowing processing. We encourage to do this KStream tutorial . The features we want to illustrate in this implementation, using KStreams are: Listen to ContainerAddedToInventory event from the containers topic and maintains a stateful table of containers. Listen to OrderCreated event from orders and assign a container from the inventory based on the pickup location and the container location and its characteristics. Implemented as JAXRS application deployed on Liberty and packaged with dockerfile. Deploy to kubernetes or run with docker-compose","title":"Kafka Streams implementation of the container inventory management"},{"location":"kstreams/#start-with-maven","text":"Kafka stream delivers a Maven archetype to create a squeleton project. The following command can be used to create the base code. mvn archetype:generate -DarchetypeGroupId=org.apache.kafka -DarchetypeArtifactId=streams-quickstart-java -DarchetypeVersion=2.1.0 -DgroupId=kc-container -DartifactId=kc-container-streams -Dversion=0.1 -Dpackage=containerManager We added a .project file to develop the code in Eclipse, imported the code into Eclipse and modify the .classpath with the following lines: <classpathentry kind=\"con\" path=\"org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER\"> <attributes> <attribute name=\"maven.pomderived\" value=\"true\"/> </attributes> </classpathentry> To access to serializer and testing framework we added the following dependencies in the pom.xml: <dependency> <groupId>org.apache.kafka</groupId> <artifactId>kafka-clients</artifactId> <version>${kafka.version}</version> </dependency> <dependency> <groupId>org.apache.kafka</groupId> <artifactId>kafka-streams-test-utils</artifactId> <version>${kafka.version}</version> <scope>test</scope> </dependency> In fact at the end of our development the pom was enhanced to support, liberty, integration tests and javametrics.","title":"Start with maven"},{"location":"kstreams/#some-useful-kafka-streams-apis","text":"The stream configuration looks similar to the Kafka consumer and producer configuration. props.put(StreamsConfig.APPLICATION_ID_CONFIG, \"container-streams\"); props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\"); props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass()); props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass()); The StreamsConfig is a specific configuration for Streams app. One of the interesting class is the KStream to manage a stream of structured events. Kstreams represents unbounded collection of immutable events. Two classes are supporting the order and container processing: ContainerInventoryView ContainerOrderAssignment We are using the Streams DSL APIs to do the processing. Here is an example of terminal stream to print what is coming to the orders topic: final StreamsBuilder builder = new StreamsBuilder(); builder.stream(\"orders\") .foreach((key,value) -> { Order order = parser.fromJson((String)value, OrderEvent.class).getPayload(); // TODO do something to the order System.out.println(\"received order \" + key + \" \" + value); }); final Topology topology = builder.build(); final KafkaStreams streams = new KafkaStreams(topology, props); streams.start(); We want now to implement the container inventory. We want to support the following events: ContainerAddedToInventory, ContainerRemovedFromInventory ContainerAtLocation ContainerOnMaintenance, ContainerOffMaintenance, ContainerAssignedToOrder, ContainerReleasedFromOrder ContainerGoodLoaded, ContainerGoodUnLoaded ContainerOnShip, ContainerOffShip ContainerOnTruck, ContainerOffTruck We want the container event to keep a timestamp, a version, a type, and a payload representing the data describing a Reefer container. The Key is the containerID. The java class for the container event is here . Using a TDD approach we will start by the tests to implement the solution. For more information on the Streams DSL API keeep this page slose to you .","title":"Some useful Kafka streams APIs"},{"location":"kstreams/#test-driven-development","text":"We want to document two major test suites. One for building the internal view of the container inventory, the other to support the container to order assignment.","title":"Test Driven Development"},{"location":"kstreams/#container-inventory","text":"When the service receives a ContainerAdded event it needs to add it to the table and be able to retreive it by ID To support the Get By ID we are adding a Service class with the operation exposed as RESTful resource using JAXRS annotations. We already described this approach in the fleetms project . To test a stream application without Kafka backbone there is a test utility available here . The settings are simple: get the properties, define the serialisation of the key and value of the event to get from kafka, define the stream process flow, named topology, send the input and get the output. The test TestContainerInventory is illustrating how to use the TopologyTestDriver . Properties props = ApplicationConfig.getStreamsProperties(\"test\"); props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"dummy:1234\"); TopologyTestDriver testDriver = new TopologyTestDriver( buildProcessFlow(), props); ConsumerRecordFactory<String, String> factory = new ConsumerRecordFactory<String, String>(\"containers\", new StringSerializer(), new StringSerializer()); ConsumerRecord<byte[],byte[]> record = factory.create(\"containers\",ce.getContainerID(), parser.toJson(ce)); testDriver.pipeInput(record); We are using the String default serialization for the key and the ContainerEvent, and use Gson to serialize and deserialize the json. So the test is to prepare a ContainerEvent with type = \"ContainerAdded\" and then get the payload, persist it in the table and access to the table via the concept of store and validate the data. Below is the access to the store and compare the expected results KeyValueStore<String, String> store = testDriver.getKeyValueStore(\"queryable-container-store\"); String containerStrg = store.get(ce.getContainerID()); Assert.assertNotNull(containerStrg); Assert.assertTrue(containerStrg.contains(ce.getContainerID())); Assert.assertTrue(containerStrg.contains(\"atDock\")); Now the tricky part is in the Stream process flow. The idea is to process the ContainerEvent as streams (of String) and extract the payload (a Container), then generate the Container in a new stream, group by the key and then save to a table. We separate the code in a function so e can move it into the real application after. public Topology buildProcessFlow() { final StreamsBuilder builder = new StreamsBuilder(); // containerEvent is a string, map values help to change the type and data of the inpit values builder.stream(CONTAINERS_TOPIC).mapValues((containerEvent) -> { // the container payload is of interest to keep in table Container c = jsonParser.fromJson((String)containerEvent, ContainerEvent.class).getPayload(); return jsonParser.toJson(c); }).groupByKey() // the keys are kept so we can group by key to prepare for the tabl .reduce((container,container1) -> { System.out.println(\"received container \" + container1 ); return container1; }, Materialized.as(\"queryable-container-store\")); return builder.build(); } The trick is to use the reduce() function that get the container and save it to the store that we can specify. The unit test runs successfully with the command: mvn -Dtest=TestContainerInventory test . This logic can be integrated in a View class. So we can refactor the test and add new class (see ContainerInventoryView class) to move the logic into the applciation. From a design point of view this class is a DAO. Now that we are not using the Testing tool, we need the real streams. In class ContainerInventoryView: private KafkaStreams streams; // .. Properties props = ApplicationConfig.getStreamsProperties(\"container-streams\"); props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\"); streams = new KafkaStreams(buildProcessFlow(), props); try { streams.cleanUp(); streams.start(); } catch (Throwable e) { System.exit(1); } As illustrated above, the streams API is a continuous running Thread, so it needs to be started only one time. We will address scaling separatly. So we isolate the DAO as a Singleton, and start it when the deployed application starts, via a ServletContextListener. public class EventLoop implements ServletContextListener{ @Override public void contextInitialized(ServletContextEvent sce) { // Initialize the Container consumer ContainerInventoryView cView = (ContainerInventoryView)ContainerInventoryView.instance(); cView.start(); } Now we can add the getById operation, package as a war, deploy it to Liberty.","title":"Container inventory"},{"location":"kstreams/#container-to-order-assignment","text":"The business logic we want to implement is to get an order with the source pickup city, the type of product, the quantity and the expected pickup date, manage the internal list of containers and search for a container located close to the pickup city from the order. The test to validate this logic is under kstreams/src/test/java/ut/TestContainerAssignment . The story will not be completed if we do not talk about how th application get the order. As presented in the design and order command microservice implementation, when an order is created an event is generated to the orders topic. So we need to add another Streams processing and start the process flow in the context listener.","title":"Container to Order Assignment"},{"location":"kstreams/#run-tests","text":"Recall with maven we can run all the unit tests, one test and skip integration tests. # Test a unique test $ mvn -Dtest=TestContainerInventory test # Skip all tests mvn install -DskipTests # Skip integration test mvn install -DskipITs # Run everything mvn install To start the liberty server use the script: ./script/startLocalLiberty or mvn liberty:run-server","title":"Run tests"},{"location":"kstreams/#how-streams-flow-are-resilient","text":"","title":"How streams flow are resilient?"},{"location":"kstreams/#how-to-scale","text":"","title":"How to scale?"}]}